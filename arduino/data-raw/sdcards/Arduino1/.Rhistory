a1_1001_200720 <- a1_1001_200720 %>% mutate(arduinoId = as.integer(arduinoId)
)
a1_1001_200720
a1_1001_200720 %>% left_join(dat)
a1_1001_200720
dat
# Read the data saved to web
dat <- as_tibble(read_csv("~/GitHubRepos/vegbot/arduino/data-raw/webfaction/2020-07-20/arduino_data.CSV",
col_names = c("id","arduinoId","ts", "temp","temp_dht22","humidity","humidity_dht22","pressure","illuminance", "uva", "uvb" , "uvIndex","rssi","millis","filename" )))
a1_1001_200720 <- a1_1001_200720 %>% mutate(arduinoId = as.integer(arduinoId),
temp = as.integer(temp),
temp_dht22 = as.integer(temp_dht22),
humidity = as.integer(humidity),
humidity_dht22 = as.integer(humidity_dht22),
pressure = as.integer(pressure),
uva = as.integer(uva),
uvb = as.integer(uvb),
uvIndex = as.integer(uvIndex))
a1_1002_200720 <- a1_1002_200720 %>% mutate(arduinoId = as.integer(arduinoId),
temp = as.integer(temp),
temp_dht22 = as.integer(temp_dht22),
humidity = as.integer(humidity),
humidity_dht22 = as.integer(humidity_dht22),
pressure = as.integer(pressure),
uva = as.integer(uva),
uvb = as.integer(uvb),
uvIndex = as.integer(uvIndex))
a2_2001_200720 <- a2_2001_200720 %>% mutate(arduinoId = as.integer(arduinoId),
temp = as.integer(temp),
temp_dht22 = as.integer(temp_dht22),
humidity = as.integer(humidity),
humidity_dht22 = as.integer(humidity_dht22),
pressure = as.integer(pressure),
uva = as.integer(uva),
uvb = as.integer(uvb),
uvIndex = as.integer(uvIndex))
a1_1001_200720 %>% left_join(dat)
a2_2001_200720
# data harvested 200720 (other files contain no useful data)
a1_1001_200720 <- as_tibble(read_csv("~/GitHubRepos/vegbot/arduino/data-raw/sdcards/Arduino1/LOG-1001.CSV"))
a1_1002_200720 <- as_tibble(read_csv("~/GitHubRepos/vegbot/arduino/data-raw/sdcards/Arduino1/LOG-1002.CSV"))
a2_2001_200720 <- as_tibble(read_csv("~/GitHubRepos/vegbot/arduino/data-raw/sdcards/Arduino2/LOG-2001.CSV"))
a1_1001_200720$filename <- "log-1001.csv"
a1_1002_200720$filename <- "log-1002.csv"
a2_2001_200720$filename <- "log-2001.csv"
a1_1001_200720 <- a1_1001_200720 %>% mutate(arduinoId = as.numeric(arduinoId),
temp = as.numeric(temp),
temp_dht22 = as.numeric(temp_dht22),
humidity = as.numeric(humidity),
humidity_dht22 = as.numeric(humidity_dht22),
pressure = as.numeric(pressure),
uva = as.numeric(uva),
uvb = as.numeric(uvb),
uvIndex = as.numeric(uvIndex))
a1_1002_200720 <- a1_1002_200720 %>% mutate(arduinoId = as.numeric(arduinoId),
temp = as.numeric(temp),
temp_dht22 = as.numeric(temp_dht22),
humidity = as.numeric(humidity),
humidity_dht22 = as.numeric(humidity_dht22),
pressure = as.numeric(pressure),
uva = as.numeric(uva),
uvb = as.numeric(uvb),
uvIndex = as.numeric(uvIndex))
a2_2001_200720 <- a2_2001_200720 %>% mutate(arduinoId = as.numeric(arduinoId),
temp = as.numeric(temp),
temp_dht22 = as.numeric(temp_dht22),
humidity = as.numeric(humidity),
humidity_dht22 = as.numeric(humidity_dht22),
pressure = as.numeric(pressure),
uva = as.numeric(uva),
uvb = as.numeric(uvb),
uvIndex = as.numeric(uvIndex))
a2_2001_200720
dat
dat1
dat1 <- dat1 %>% mutate(temp_dht22 = as.numeric(temp_dht22),
humidity_dht22 = as.numeric(humidity_dht22),
pressure = as.numeric(pressure),
uva = as.numeric(uva),
uvb = as.numeric(uvb),
uvIndex = as.numeric(uvIndex))
dat1 <- dat %>% filter(millis != "NULL")
dat1 <- dat1 %>% mutate(temp_dht22 = as.numeric(temp_dht22),
humidity_dht22 = as.numeric(humidity_dht22),
pressure = as.numeric(pressure),
uva = as.numeric(uva),
uvb = as.numeric(uvb),
uvIndex = as.numeric(uvIndex))
a1_1001_200720 %>% left_join(dat1)
z <- a1_1001_200720 %>% left_join(dat1)
View(z)
z <- a1_1001_200720 %>% left_join(dat1, by = c("millis", "arduinoID", "filename"))
z <- a1_1001_200720 %>% left_join(dat1, by = c("millis", "arduinoId", "filename"))
View(z)
dat1 %>% filter(arduinoId == 1, filename == "log-1001.csv")
View(z)
z <- a1_1001_200720 %>% left_join(dat1)
tail(z)
a1_1001_200720 <- a1_1001_200720 %>% left_join(dat1)
a1_1002_200720 <- a1_1002_200720 %>% left_join(dat1)
a2_2001_200720 <- a2_2001_200720 %>% left_join(dat1)
ts <- "2020-07-11 22:18:57"
ts - 15715
ts <- as.POSIXct("2020-07-11 22:18:57")
ts
ts - 15715
View(a1_1002_200720)
ts <- as.POSIXct("2020-07-12 06:48:22")
ts1 <- as.POSIXct("2020-07-12 06:48:22")
ts <- ts1 - 15717
ts
ts2 <- as.POSIXct("2020-07-12 06:49:26")
ts2 - 79047
ts2 - 79047/1000
ts1 - 15717/1000
i = 1
(i == 1 | a1_1001_200720$millis[i-1] == "millis")
a1_1001_200720$millis[i-1]
a1_1001_200720$millis[i]
i == 1
i = 2
(a1_1001_200720$millis[i-1] == "millis")
(a1_1001_200720$millis[i-1] == "millis")
a1_1001_200720$millis[i-1]
i
a1_1001_200720
(is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis")
i = 3
(a1_1001_200720$millis[i-1] == "millis")
start_ts <- a1_1001_200720$ts[i] - a1_1001_200720$millis[i]/1000
a1_1001_200720$millis[i]
start_ts <- a1_1001_200720$ts[i] - as.integer(a1_1001_200720$millis[i])/1000
start_ts
i
(a1_1001_200720$millis[i-1] == "millis")
start_ts
(is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis")
a1_1001_200720$ts2 <- NA
start_ts + as.integer(a1_1001_200720$millis[i])/1000
a1_1001_200720$ts2[i] <- start_ts + as.integer(a1_1001_200720$millis[i])/1000
a1_1001_200720$ts2[i]
a1_1001_200720$ts2 <- NA
for (i in 2:nrow(a1_1001_200720)) {
if (a1_1001_200720$millis[i-1] == "millis") {
start_ts <- a1_1001_200720$ts[i] - as.integer(a1_1001_200720$millis[i])/1000
}
if (is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis") {
a1_1001_200720$ts2[i] <- start_ts + as.integer(a1_1001_200720$millis[i])/1000
}
}
View(a1_1001_200720)
a2_2001_200720
a1_1001_200720 <- rowid_to_column(a1_1001_200720, "row_num")
a1_1001_200720
ts_df <- tribble(
~ row_num,
~ ts
)
ts_df <- tribble(
~ row_num,
~ ts
)
for (i in 2:nrow(a1_1001_200720)) {
ts2 <- NA
if (a1_1001_200720$millis[i-1] == "millis") {
start_ts <- a1_1001_200720$ts[i] - as.integer(a1_1001_200720$millis[i])/1000
}
if (is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis") {
ts2 <- start_ts + as.integer(a1_1001_200720$millis[i])/1000
}
ts_df <- ts_df %>% add_row(tibble_row(
row_num = a1_1001_200720$row_num[i],
ts2 <- ts2
))
}
ts_df <- tribble(
~ row_num,
~ ts2
)
for (i in 2:nrow(a1_1001_200720)) {
ts2 <- NA
if (a1_1001_200720$millis[i-1] == "millis") {
start_ts <- a1_1001_200720$ts[i] - as.integer(a1_1001_200720$millis[i])/1000
}
if (is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis") {
ts2 <- start_ts + as.integer(a1_1001_200720$millis[i])/1000
}
ts_df <- ts_df %>% add_row(tibble_row(
row_num = a1_1001_200720$row_num[i],
ts2 <- ts2
))
}
ts_df
for (i in 2:nrow(a1_1001_200720)) {
ts2 <- NA
if (a1_1001_200720$millis[i-1] == "millis") {
start_ts <- a1_1001_200720$ts[i] - as.integer(a1_1001_200720$millis[i])/1000
}
if (is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis") {
ts2 <- start_ts + as.integer(a1_1001_200720$millis[i])/1000
}
ts_df <- ts_df %>% add_row(tibble_row(
row_num = a1_1001_200720$row_num[i],
ts2 = ts2
))
}
View(ts_df)
i = 1
i = 2
(a1_1001_200720$millis[i-1] == "millis")
(is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis")
a1_1001_200720$ts[i]
View(a1_1002_200720)
View(a1_1001_200720)
(is.na(a1_1001_200720$ts[i])
)
a1_1001_200720$millis[i] != "millis")
a1_1001_200720$millis[i] != "millis"
ts2 <- NA
ts_df <- ts_df %>% add_row(tibble_row(
row_num = a1_1001_200720$row_num[i],
ts2 = ts2
))
ts_df <- tribble(
~ row_num,
~ ts2
)
ts2 <- a1_1001_200720$ts[i]
ts2
(a1_1001_200720$millis[i-1] == "millis")
(is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis")
a1_1001_200720
i
ts_df <- ts_df %>% add_row(tibble_row(
row_num = a1_1001_200720$row_num[i],
ts2 = ts2
))
ts_df
ts_df <- tribble(
~ row_num,
~ ts2
)
i = 3
ts2 <- a1_1001_200720$ts[i]
ts2
(a1_1001_200720$millis[i-1] == "millis")
start_ts <- a1_1001_200720$ts[i] - as.integer(a1_1001_200720$millis[i])/1000
ts2 <- a1_1001_200720$ts[i]
ts2
ts2 <- a1_1001_200720$ts[i]
ts2
start_ts <- ts2 - as.integer(a1_1001_200720$millis[i])/1000
start_ts
(is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis")
(!is.na(ts2))
ts_df <- ts_df %>% add_row(tibble_row(
row_num = a1_1001_200720$row_num[i],
ts2 = ts2
))
ts_df
ts_df <- tribble(
~ row_num,
~ ts2
)
for (i in 2:nrow(a1_1001_200720)) {
ts2 <- a1_1001_200720$ts[i]
if (a1_1001_200720$millis[i-1] == "millis") {
start_ts <- ts2 - as.integer(a1_1001_200720$millis[i])/1000
}
if (is.na(a1_1001_200720$ts[i]) && a1_1001_200720$millis[i] != "millis") {
ts2 <- start_ts + as.integer(a1_1001_200720$millis[i])/1000
}
if (!is.na(ts2)) {
ts_df <- ts_df %>% add_row(tibble_row(
row_num = a1_1001_200720$row_num[i],
ts2 = ts2
))
}
}
a1_1002_200720 <- rowid_to_column(a1_1002_200720, "row_num")
a2_2001_200720 <- rowid_to_column(a2_2001_200720, "row_num")
View(ts_df)
a2_2001_200720 %>% filter(is.na(ts))
a1_1001_200720 %>% left_join(ts_df)
ts_df$ts2 <- as.POSIXct(ts_df$ts2)
ts_df
a1_1001_200720 %>% left_join(ts_df)
a1_1001_200720
# data harvested 200720 (other files contain no useful data)
a1_1001_200720 <- as_tibble(read_csv("~/GitHubRepos/vegbot/arduino/data-raw/sdcards/Arduino1/LOG-1001.CSV"))
a1_1001_200720$filename <- "log-1001.csv"
a1_1001_200720 <- a1_1001_200720 %>% mutate(arduinoId = as.numeric(arduinoId),
temp = as.numeric(temp),
temp_dht22 = as.numeric(temp_dht22),
humidity = as.numeric(humidity),
humidity_dht22 = as.numeric(humidity_dht22),
pressure = as.numeric(pressure),
uva = as.numeric(uva),
uvb = as.numeric(uvb),
uvIndex = as.numeric(uvIndex))
a1_1001_200720 <- a1_1001_200720 %>% left_join(dat1)
a1_1001_200720 <- rowid_to_column(a1_1001_200720, "row_num")
a1_1001_200720 %>% left_join(ts_df)
calc_ts <- function(df) {
ts_df <- tribble(
~ row_num,
~ ts2
)
for (i in 2:nrow(df)) {
ts2 <- df$ts[i]
if (df$millis[i-1] == "millis") {
start_ts <- ts2 - as.integer(df$millis[i])/1000
}
if (is.na(df$ts[i]) && df$millis[i] != "millis") {
ts2 <- start_ts + as.integer(df$millis[i])/1000
}
if (!is.na(ts2)) {
ts_df <- ts_df %>% add_row(tibble_row(
row_num = df$row_num[i],
ts2 = ts2
))
}
}
ts_df$ts2 <- as.POSIXct(ts_df$ts2)
df %>% left_join(ts_df)
return(df)
}
calc_ts(a1_1001_200720)
calc_ts <- function(df) {
ts_df <- tribble(
~ row_num,
~ ts2
)
for (i in 2:nrow(df)) {
ts2 <- df$ts[i]
if (df$millis[i-1] == "millis") {
start_ts <- ts2 - as.integer(df$millis[i])/1000
}
if (is.na(df$ts[i]) && df$millis[i] != "millis") {
ts2 <- start_ts + as.integer(df$millis[i])/1000
}
if (!is.na(ts2)) {
ts_df <- ts_df %>% add_row(tibble_row(
row_num = df$row_num[i],
ts2 = ts2
))
}
}
ts_df$ts2 <- as.POSIXct(ts_df$ts2)
df <- df %>% left_join(ts_df)
return(df)
}
calc_ts(a1_1001_200720)
a1_1001_200720 <- calc_ts(a1_1001_200720)
a1_1001_200720
a1_1002_200720 <- calc_ts(a1_1002_200720)
a2_2001_200720 <- calc_ts(a2_2001_200720)
View(a1_1001_200720)
?union
dat2 <- dplyr::union(a1_1001_200720, a1_1002_200720, a2_2001_200720)
table(dat2)
table(dat2$arduinoId)
table(dat2$filename)
dat2 <- dplyr::union(dat2, a2_2001_200720)
View(dat2)
table(dat2$filename)
View(dat)
loc
loc %>% filter(compare == 0)
loc <- as_tibble(read_csv("~/GitHubRepos/vegbot/arduino/data-raw/webfaction/2020-07-20/arduino_location.CSV",
col_names = c("id","arduinoId","location","dt_from", "dt_to","compare","ts","note")))
View(loc)
loc
loc1 <- loc %>% filter(compare == 0)
loc1
unique(loc1$location)
dat2
plot = "Upper plot"
loc1 %>% filter(location == plot)
loc2 <- loc1 %>% filter(location == plot)
loc2
loc <- as_tibble(read_csv("~/GitHubRepos/vegbot/arduino/data-raw/webfaction/2020-07-20/arduino_location.CSV",
col_names = c("id","arduinoId","location","dt_from", "dt_to","compare","ts","note")))
loc <- as_tibble(read_csv("~/GitHubRepos/vegbot/arduino/data-raw/webfaction/2020-07-20/arduino_location.CSV",
col_names = c("id","arduinoId","location","dt_from", "dt_to","compare","site_testing", "ts","note")))
View(loc)
loc1 <- loc %>% filter(compare == 0)
loc1 <- loc %>% filter(site_testing == 0)
loc1
loc1 <- loc %>% filter(site_testing == 1)
loc1
loc2 <- loc1 %>% filter(location == plot)
loc2
for (i in (1:nrow(loc2))) {
loc_dat <- dat2 %>% filter(ts > loc2$dt_from[i],
ts < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
)
for (i in (1:nrow(loc2))) {
loc_dat <- dat2 %>% filter(ts > loc2$dt_from[i],
ts < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
}
i = 1
loc_dat <- dat2 %>% filter(ts > loc2$dt_from[i],
ts < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
loc2$dt_from[i]
ts < loc2$dt_to[i]
loc2$dt_to[i]
loc2$arduinoId[i]
dat2 %>% filter(ts > loc2$dt_from[i],
ts < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
dat2 %>% filter(ts > loc2$dt_from[i])
dat2 %>% filter(ts > loc2$dt_from[i],
ts < loc2$dt_to[i])
table(dat2$arduinoId)
loc2$arduinoId[i]
z <- dat2 %>% filter(ts > loc2$dt_from[i],
ts < loc2$dt_to[i])
View(z)
dat2 %>% filter(date(ts) == "2020-07-10")
y <- dat2 %>% filter(date(ts) == "2020-07-10")
View(y)
View(a2_2001_200720)
loc_dat <- dat2 %>% filter(ts2 > loc2$dt_from[i],
ts2 < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
loc_dat
get_plot_data <- function(arduino_data, arduino_location, plot ) {
loc2 <- arduino_location %>% filter(location == plot)
for (i in (1:nrow(loc2))) {
loc_dat <- arduino_data %>% filter(ts2 > loc2$dt_from[i],
ts2 < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
}
return(loc_dat)
}
get_plot_data(dat2, loc1, "Upper plot")
get_plot_data <- function(arduino_data, arduino_location, plot ) {
loc2 <- arduino_location %>% filter(location == plot)
for (i in (1:nrow(loc2))) {
loc_dat <- arduino_data %>% filter(ts2 > loc2$dt_from[i],
ts2 < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
}
loc_dat$location <- plot
return(loc_dat %>% select(location, everything()))
}
get_plot_data <- function(arduino_data, arduino_location, plot ) {
loc2 <- arduino_location %>% filter(location == plot)
for (i in (1:nrow(loc2))) {
loc_dat <- arduino_data %>% filter(ts2 > loc2$dt_from[i],
ts2 < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
}
loc_dat$location <- plot
return(loc_dat)
}
dat_upper <- get_plot_data(dat2, loc1, "Upper plot")
dat_upper
dat_lower <- get_plot_data(dat2, loc1, "Lower plot")
View(loc)
dat_swingball <- dat_upper <- get_plot_data(dat2, loc1, "Swingball")
dat_all <- dplyr::union(dat_upper, dat_lower)
dat_all <- dplyr::union(dat_all, dat_swingball)
dat_upper <- get_plot_data(dat2, loc1, "Upper plot")
dat_lower <- get_plot_data(dat2, loc1, "Lower plot")
dat_swingball <- dat_upper <- get_plot_data(dat2, loc1, "Swingball")
dat_all <- dplyr::union(dat_upper, dat_lower)
dat_all <- dplyr::union(dat_all, dat_swingball)
dat_upper <- get_plot_data(dat2, loc1, "Upper plot")
loc1
plot <- "Lower plot"
loc1 %>%  filter(location == plot)
i = 1
arduino_data <- loc1
arduino_data <- dat2
arduino_location <- loc1
arduino_data %>% filter(ts2 > loc2$dt_from[i],
ts2 < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
dat_lower <- get_plot_data(dat2, loc1, "Lower plot")
loc2 <- arduino_location %>% filter(location == plot)
loc2
loc_dat <- arduino_data %>% filter(ts2 > loc2$dt_from[i],
ts2 < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
loc_dat
loc_dat$location <- plot
loc_dat
dat_swingball <- get_plot_data(dat2, loc1, "Swingball")
get_plot_data <- function(arduino_data, arduino_location, plot ) {
loc2 <- arduino_location %>% filter(location == plot)
for (i in (1:nrow(loc2))) {
loc_dat <- arduino_data %>% filter(ts2 > loc2$dt_from[i],
ts2 < loc2$dt_to[i],
arduinoId == loc2$arduinoId[i])
}
loc_dat$location <- plot
return(loc_dat)
}
dat_upper <- get_plot_data(dat2, loc1, "Upper plot")
dat_lower <- get_plot_data(dat2, loc1, "Lower plot")
dat_swingball <- get_plot_data(dat2, loc1, "Swingball")
arduino_data
arduino_location
plot
loc2 <- arduino_location %>% filter(location == plot)
loc2
nrow(loc2)
